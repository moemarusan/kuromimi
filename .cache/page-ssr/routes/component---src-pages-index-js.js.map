{"version":3,"file":"component---src-pages-index-js.js","mappings":"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","sources":["webpack://kuromimi/./src/components/layout.js","webpack://kuromimi/./src/components/seo.js","webpack://kuromimi/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link className=\"blog-title\" to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"blog-title\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <div class=\"wrap\">\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n      ©︎moemarusan\n      </footer>\n      </div>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n  let is_root;\n\n  if (title === site.siteMetadata.title) {\n    is_root = true;\n  } else {\n    is_root = false;\n  }\n\n  return (\n    <>\n        <title>{is_root ? defaultTitle : `${title} | ${defaultTitle}`}</title>\n        <meta name=\"description\" content={metaDescription} />\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={metaDescription} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:site_name\" content={defaultTitle} />\n        <meta property=\"og:image\" content=\"https://kuromimi.moemarusan.com/ogp-image.png\" />\n        <meta name=\"twitter:card\" content=\"summary\" />\n        <meta name=\"twitter:creator\" content={site.siteMetadata?.social?.twitter || ``} />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={metaDescription} />\n        <meta name=\"twitter:image\" content=\"https://kuromimi.moemarusan.com/ogp-image.png\" />\n        {children}\n      </>\n  )\n}\n\nSeo.defaultProps = {\n  meta: [],\n  description: ``,\n}\n\nSeo.propTypes = {\n  description: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <ol className=\"articles\">\n        {posts.map(post => {\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header className=\"post-list\">\n                  <h2 className=\"post-title\">\n                    <Link className=\"post-title\" to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">{title}</span>\n                    </Link>\n                  </h2>\n                  <small className=\"post-meta\">{post.frontmatter.date}</small>\n                </header>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const Head = ({data}) => (\n  <Seo title={data.site.siteMetadata?.title || `Title`} />\n)\n\nexport const pageQuery = graphql`{\n  site {\n    siteMetadata {\n      title\n    }\n  }\n  allMarkdownRemark(sort: {frontmatter: {date: DESC}}) {\n    nodes {\n      excerpt\n      fields {\n        slug\n      }\n      frontmatter {\n        date(formatString: \"YYYY-MM-DD\")\n        title\n        description\n      }\n    }\n  }\n}`\n"],"names":["React","Link","Layout","location","title","children","rootPath","__PATH_PREFIX__","isRootPath","pathname","header","createElement","className","to","class","PropTypes","Seo","description","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","site","staticQueryData","data","metaDescription","siteMetadata","defaultTitle","is_root","Fragment","name","content","property","social","twitter","defaultProps","meta","propTypes","string","arrayOf","object","isRequired","BlogIndex","_data$site$siteMetada","siteTitle","posts","allMarkdownRemark","nodes","length","map","post","frontmatter","fields","slug","key","itemScope","itemType","itemProp","date","Head","_data$site$siteMetada2","pageQuery"],"sourceRoot":""}